import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { NavLink } from "react-router-dom";
import {
  getLogoFromApi,
  getTheaterFilmFromApi,
} from "../../Redux/Actions/FilmAction";

import { makeStyles } from '@material-ui/core/styles';
import Accordion from '@material-ui/core/Accordion';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import Typography from '@material-ui/core/Typography';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import Grid from '@material-ui/core/Grid';
import Paper from '@material-ui/core/Paper';
import { Button } from "@material-ui/core";
import TodayIcon from '@material-ui/icons/Today';
import Avatar from '@material-ui/core/Avatar';
import PropTypes from 'prop-types';
import Tabs from '@material-ui/core/Tabs';
import Tab from '@material-ui/core/Tab';
import Box from '@material-ui/core/Box';



function TabPanel(props) {
  const { children, value, index, value1, setPadding, setMaxWidth, ...other } = props;
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`vertical-tabpanel-${index}`}
      aria-labelledby={`vertical-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box p={setPadding} style={{maxWidth: setMaxWidth}}>
          <Typography>{children}</Typography>
        </Box>
      )}
    </div>
  );
}


TabPanel.propTypes = {
  children: PropTypes.node,
  index: PropTypes.any.isRequired,
  value: PropTypes.any.isRequired,
};

function a11yProps(index) {
  return {
    id: `vertical-tab-${index}`,
    'aria-controls': `vertical-tabpanel-${index}`,
  };
}

const useTabs = makeStyles((theme) => ({
  root: {
    flexGrow: 1,
    backgroundColor: theme.palette.background.paper,
    display: 'flex',
    height: 800,
  },
  tabs: {
    borderRight: `1px solid ${theme.palette.divider}`,
  },
}));


const useAccordion = makeStyles((theme) => ({
  root: {
    width: '100%',
    '& .MuiAccordionDetails-root': {
      display: 'block'
    },
    '& .MuiPaper-elevation1': {
      boxShadow: 'none',
      borderBottom: '0.5px solid #9b9b9b4f'
    }
  },
  heading: {
    fontSize: theme.typography.pxToRem(15),
    fontWeight: theme.typography.fontWeightRegular,
  },
}));

const useGrid = makeStyles((theme) => ({
  root: {
    flexGrow: 1,
  },
  paper: {
    padding: theme.spacing(2),
    textAlign: 'center',
    color: theme.palette.text.secondary,
  },
}));

const useButton = makeStyles((theme) => ({
  root: {
    '& > *': {
      margin: theme.spacing(0.5),
      color: 'green'
    },
  },
}));
const useAvatar = makeStyles((theme) => ({
  root: {
    display: 'flex',
    '& > *': {
      margin: theme.spacing(1),
    },
  },
  rounded: {
    color: '#fff',
    background: 'transparent'
  },
}));


export default function Calender() {
  const accordion = useAccordion();
  const grid = useGrid();
  const btn = useButton()
  const avatar = useAvatar();
  const [expanded, setExpanded] = React.useState(false);
  const tabs = useTabs();
  const [value, setValue] = React.useState(0);
  const handleChangeTab = (event, newValue) => {
    setValue(newValue);
  };
  const [value1, setValue1] = React.useState(0);
  const handleChangeTab1 = (event, newValue) => {
    setValue1(newValue);
  };


  const handleChange = (panel) => (event, isExpanded) => {
    setExpanded(isExpanded ? panel : false);
  };



  let logoArr = useSelector((state) => state.TheaterListReducer.logoArr);
  let theaterArr = useSelector((state) => state.TheaterListReducer.theaterArr);
  let theaterFilmArr = useSelector(
    (state) => state.TheaterListReducer.theaterFilmArr
  );
  const theaterInfo = useSelector(state => state.TheaterListReducer.theaterInfo)
  console.log(theaterFilmArr);
  // let [theater, setTheater] = useState("CineStar");
  let [filmIndex, setfilmIndex] = useState(0);
  let [brandIndex, setBrandIndex] = useState(0);
  const dispatch = useDispatch();

  //useEffect đã bỏ vô nhưng chưa biết để làm gì 
  // useEffect(() => {
  //   dispatch(getTheaterFromApi(theater));
  // }, [theater]);


  useEffect(() => {
    // dispatch(getLogoFromApi())
    dispatch(getTheaterFilmFromApi());
  }, []);

  let render = () => {
    return (
      <div className={tabs.root}>
        <Tabs
          orientation="vertical"
          variant="scrollable"
          value={value}
          onChange={handleChangeTab}
          aria-label="Vertical tabs example"
          className={tabs.tabs}
        >
          {renderLogo()}

        </Tabs>
        {renderPanel()}

      </div>
    );
  };
  console.log(filmIndex);

  let renderPanel = () => {
    return theaterFilmArr.map((rap, i) => {
      return (
        <TabPanel value={value} index={i}>
          <div className={tabs.root}>
            <Tabs
              orientation="vertical"
              variant="scrollable"
              value={value1}
              onChange={handleChangeTab1}
              aria-label="Vertical tabs example1"
              className={tabs.tabs}
            >
              {renderTheater()}
            </Tabs>
            {renderFilmHidden()}
          </div>
        </TabPanel>
      )
    })
  }
  let renderFilmHidden = () => {
    return theaterFilmArr[brandIndex]?.lstCumRap.map((item, index) => {
      return (
        <TabPanel setPadding={3} setMaxWidth={600} value={value1} index={index}>
          {renderFilm()}
        </TabPanel>
      )
    })
  }
  let renderLogo = () => {
    let logo = [];
    theaterFilmArr.map((theaterInfo, index) => {
      logo.push(
        <Tab onClick={() => setBrandIndex(index)} label={<img src={theaterInfo.logo} />} {...a11yProps(index)} />
      );
    });
    return (
      logo
    );
  };
  const renderTime = (timeArr) => {
    return timeArr.map((time, index) => {
      return (
        <span className={btn.root}>
          <Button variant="outlined">
            <TodayIcon style={{ marginRight: 2, color: 'black' }} />
            {time.ngayChieuGioChieu.replace('T', ' lúc ')}
          </Button>
        </span>
      )
    })
  }
  let renderFilm = () => {
    return theaterFilmArr[brandIndex]?.lstCumRap[filmIndex]?.danhSachPhim.map(
      (item, index) => {
        return (

          <div className={accordion.root}>
            <Accordion expanded={expanded === index} onChange={handleChange(index)}>

              <AccordionSummary
                expandIcon={<ExpandMoreIcon />}
                aria-controls="panel1a-content"
                id="panel1a-header"
              >
                <Grid container spacing={3}>
                  <Grid item xs={2}>
                    <Avatar variant="rounded" className={avatar.rounded}>
                      <img style={{ width: '100%' }} src={item.hinhAnh} />
                    </Avatar>

                  </Grid>
                  <Grid item xs={10}>
                    <Typography variant="button" >{item.tenPhim}</Typography>
                  </Grid>
                </Grid>
              </AccordionSummary>
              <AccordionDetails>
                <Typography variant="body1" style={{ fontWeight: 'bold' }} gutterBottom>2D Digital</Typography>
                <div style={{ textAlign: "center" }} className={btn.root} >
                  <Button variant="outlined" onClick={() => console.log(123)} >Xem tất cả lịch chiếu </Button>

                </div>
                {renderTime(item.lstLichChieuTheoPhim)}
              </AccordionDetails>
            </Accordion>

          </div>


        );
      }
    );
  };
  let renderTheater = () => {
    return theaterFilmArr[brandIndex]?.lstCumRap.map((cumRap, i) => {
      return (
        // <TabPanel value={value} index={0}>
        //   <div className={tabs.root}>
        //     <Tabs
        //       orientation="vertical"
        //       variant="scrollable"
        //       value={value1}
        //       onChange={handleChangeTab1}
        //       aria-label="Vertical tabs example1"
        //       className={tabs.tabs}
        //     >
        //       {/* <Tab label="Item One1" {...a11yProps(0)} />
        //       <Tab label="Item Two1" {...a11yProps(1)} />
        //       <Tab label="Item Three1" {...a11yProps(2)} /> */}
        //       
        // <Tab label={
        //   <Grid container spacing={3}>
        //     <Grid item xs={2}>
        //       <Avatar variant="rounded" className={avatar.rounded}>
        //         <img style={{ width: '100%' }} src={theaterFilmArr[brandIndex]?.logo} />
        //       </Avatar>

        //     </Grid>
        //     <Grid item xs={10}>
        //       <Typography variant="button" >{cumRap.tenCumRap}</Typography>
        //       <Typography variant="button" >{cumRap.diaChi}</Typography>
        //     </Grid>
        //   </Grid>
        // } {...a11yProps(i)} />

        //     </Tabs>
        //     <TabPanel setPadding={3} value={value1} index={0}>
        //       Item One1
        //       </TabPanel>
        //     <TabPanel setPadding={3} value={value1} index={1}>
        //       Item Two1
        //       </TabPanel>
        //     <TabPanel setPadding={3} value={value1} index={2}>
        //       Item Three1
        //       </TabPanel>
        //   </div>
        // </TabPanel>
        // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        <Tab onClick={() =>{
          setfilmIndex(i)
        }} label={
          <Grid container spacing={3}>
            <Grid item xs={2}>
              <Avatar variant="rounded" className={avatar.rounded}>
                <img style={{ width: '100%' }} src={theaterFilmArr[brandIndex]?.logo} />
              </Avatar>

            </Grid>
            <Grid item xs={10}>
              <Typography variant="button" >{cumRap.tenCumRap}</Typography>
              <Typography variant="button" >{cumRap.diaChi}</Typography>
            </Grid>
          </Grid>
        } {...a11yProps(i)} />
      );
    })
  };

  return <section id="calender">{render()}</section>;
}
